layout(binding = 0) uniform samplerCube u_EnvironmentMap;
uniform float u_Roughness;

layout(binding = 1, rgba32f) writeonly uniform image2DArray prefilteredMap;
const float PI = 3.14159265359;

// Importance Sample GGX
vec3 ImportanceSampleGGX(vec2 Xi, float roughness, vec3 N)
{
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

// Geometry term
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float a = roughness;
    float k = (a * a) / 2.0;
    return NdotV / (NdotV * (1.0 - k) + k);
}


// Radical inverse (Van der Corput)
float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}



void main()
{
    const int SAMPLE_COUNT = 1024;
	ivec3 size = imageSize(prefilteredMap);
    vec3 cubeCoord = gl_GlobalInvocationID;
	vec2 texCoord = (vec2(cubeCoord.xy)+0.5) / size.xy;
	texCoord = texCoord * 2.0 - 1.0;
	
	vec3 N;
    if(cubeCoord.z == 0){
        N = vec3(1.0, -texCoord.yx); // posx
	} else if(cubeCoord.z == 1){
        N = vec3(-1.0, -texCoord.y, texCoord.x); //negx
	} else if(cubeCoord.z == 2){
        N = vec3(texCoord.x, 1.0, texCoord.y); // posy
	} else if(cubeCoord.z == 3){
        N = vec3(texCoord.x, -1.0, -texCoord.y); //negy
	} else if(cubeCoord.z == 4){
        N = vec3(texCoord.x, -texCoord.y, 1.0); // posz
	} else if(cubeCoord.z == 5){
        N = vec3(-texCoord.xy, -1.0); // negz
	}
	N = normalize(N);
    vec3 V = N;

	vec3 prefilteredColor = vec3(0);
	float totalWeight = 0.0;
	for (uint i = 0; i < SAMPLE_COUNT; i++)
    {
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H = ImportanceSampleGGX(Xi, u_Roughness, N);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if (NdotL > 0.0)
        {
            prefilteredColor += texture(u_EnvironmentMap, L).rgb * NdotL;
            totalWeight += NdotL;
        }
    }


	prefilteredColor /= max(totalWeight,0.001);
	imageStore(prefilteredMap,ivec3(gl_GlobalInvocationID),vec4(prefilteredColor.xyz,1.0));
}