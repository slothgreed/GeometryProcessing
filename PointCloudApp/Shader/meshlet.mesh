

layout(local_size_x=1) in;
layout(max_vertices=60, max_primitives=20) out;
layout(triangles) out;

layout(std430, binding = 0) buffer CameraBuffer
{
	Camera camera;
};

layout(std430, binding  = 1) buffer posBuffer
{
	vec4 position[];
};

layout(std430, binding  = 2) buffer meshletBuffer
{
	ivec4 meshlet[];
};

layout(std430, binding  = 3) buffer indexBuffer
{
	int index[];
};

#define MAX_COLORS 10
vec3 meshletcolors[MAX_COLORS] = {
  vec3(1,0,0), 
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  vec3(1,1,1)
};

layout (location = 0) out PerVertexData
{
  vec4 color;
} v_out[];

uniform mat4 u_Model;



void main()
{
	uint globalID = gl_GlobalInvocationID.x;
	int vertexOffset = meshlet[globalID].x;
	int vertexSize = meshlet[globalID].y;
	int meshletIndex = meshlet[globalID].z;
	for(int i = 0; i < vertexSize; i++) {
		gl_MeshVerticesNV[i].gl_Position = camera.VP * u_Model * position[index[vertexOffset + i]];
		gl_PrimitiveIndicesNV[i] = i;
		v_out[i].color =  vec4(meshletcolors[meshletIndex%MAX_COLORS], 1.0);
	}
	gl_PrimitiveCountNV = vertexSize / 3;

	/*
	gl_MeshVerticesNV[0].gl_Position = position[0];
	gl_MeshVerticesNV[1].gl_Position = position[1];
	gl_MeshVerticesNV[2].gl_Position = position[2];
	gl_PrimitiveIndicesNV[0] = 0;
	gl_PrimitiveIndicesNV[1] = 1;
	gl_PrimitiveIndicesNV[2] = 2;

	gl_PrimitiveCountNV = 1;
	*/
}