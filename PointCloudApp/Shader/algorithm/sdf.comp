#version 430
const float FLOAT_MAX = 3.4028235e+38;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
struct BVHNode
{
	vec4 min;  // w = left;
	vec4 max;  // w = right;
	uvec4 link; // x = parent; y = morton; z = triangleIndex;
};


layout(std430,binding = 0) buffer posBuffer
{
	vec4 position[];
};

layout(std430,binding = 1) buffer indexBuffer
{
	uint indexs[];
};

layout(std430,binding = 2) buffer bvhBuffer
{
	BVHNode nodes[];
};

layout(rgba32f, binding = 3) uniform image2D sdfImage;

uniform vec3 u_minBox;
uniform vec3 u_pitch;
uniform float u_position;
uniform int u_axis; // 0 = X; 1 = Y; 2 = Z;
uniform int u_resolute;
uniform int u_maxTriangle;
uniform float u_frequency;
uniform mat4 u_Model;

// TODO : 
float CalcDistance(vec3 v, vec3 p0, vec3 p1, vec3 p2)
{
	float d0 = length(v - p0);
	float d1 = length(v - p1);
	float d2 = length(v - p2);
	
	return min(min(d0,d1),d2);
}

void GetTrianglePos(int triIndex, out vec3 p0, out vec3 p1, out vec3 p2)
{
	p0 = position[indexs[3 * triIndex + 0]].xyz;
	p1 = position[indexs[3 * triIndex + 1]].xyz;
	p2 = position[indexs[3 * triIndex + 2]].xyz;
}
void main()
{
	vec3 pixelPos = vec3(0);
	pixelPos[u_axis] = u_position;
	vec3 halfPitch = 0.5 * u_pitch;
	
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= u_resolute || pixel.y >= u_resolute) return;
	int width = pixel.x;
	int height = pixel.y;
	
	// width;
	int axisWidth = (u_axis + 1) % 3;
	pixelPos[axisWidth] = u_minBox[axisWidth] + (width * u_pitch[axisWidth]) + halfPitch[axisWidth]; 
	
	// height;
	int axisHeight = (u_axis + 2) % 3;
	pixelPos[axisHeight] = u_minBox[axisHeight] + (height * u_pitch[axisHeight]) + halfPitch[axisHeight]; 
	
	float minDist = FLOAT_MAX; // TODO : CalcDistance();
	for(int i = 0; i < u_maxTriangle; i++){
		vec3 p0,p1,p2;
		GetTrianglePos(i,p0,p1,p2);
		float dist = CalcDistance(pixelPos,p0,p1,p2);
		minDist = min(minDist,dist);
	}
	
	float dist = abs(mod(minDist,u_frequency) - (u_frequency * 0.5));
	if(dist < 0.1f){dist = 255;} else{dist = 0;}

	vec4 color = vec4(1,0,0,1);
	
	imageStore(sdfImage, ivec2(width,height) ,color);
}